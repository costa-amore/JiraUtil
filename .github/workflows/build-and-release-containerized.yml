# DISABLED: This workflow is temporarily disabled
# Use build-and-release.yml instead for native builds
#
# The containerized approach was causing Docker build issues on Windows
# and is not needed since we have working native builds.
#
# To re-enable this workflow:
# 1. Uncomment all lines below
# 2. Fix any Docker-related issues
# 3. Test the containerized builds
#
# name: Build and Release (Containerized)
#
# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch: # Allow manual triggering
#
# env:
#   PYTHON_VERSION: '3.11'
#
# jobs:
#   build-linux:
#     name: Build Linux Executables
#     runs-on: ubuntu-latest
#     if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
#     
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       
#     - name: Build Linux container
#       run: |
#         docker build -f Dockerfile.linux -t jirautil-linux .
#         
#     - name: Run Linux build
#       run: |
#         docker run --name linux-build jirautil-linux ./build-unix.sh --platform linux
#         
#     - name: Copy artifacts from container
#       run: |
#         docker cp linux-build:/app/build-executables ./linux-artifacts
#         
#     - name: Get version
#       id: version
#       run: |
#         VERSION=$(python version_manager.py get)
#         echo "version=$VERSION" >> $GITHUB_OUTPUT
#         echo "Current version: $VERSION"
#         
#     - name: Upload Linux artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: executables-linux-v${{ steps.version.outputs.version }}
#         path: linux-artifacts/
#         retention-days: 30
#         
#     - name: Cleanup
#       if: always()
#       run: |
#         docker rm linux-build || true
#         
#   build-windows:
#     name: Build Windows Executables
#     runs-on: windows-latest
#     if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
#     
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       
#     - name: Build Windows container
#       run: |
#         docker build -f Dockerfile.windows -t jirautil-windows .
#         
#     - name: Run Windows build
#       run: |
#         docker run --name windows-build jirautil-windows powershell -ExecutionPolicy Bypass -File build.ps1 -Platform windows
#         
#     - name: Copy artifacts from container
#       run: |
#         docker cp windows-build:/app/build-executables ./windows-artifacts
#         
#     - name: Get version
#       id: version
#       run: |
#         $VERSION = python version_manager.py get
#         echo "version=$VERSION" >> $env:GITHUB_OUTPUT
#         echo "Current version: $VERSION"
#         
#     - name: Upload Windows artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: executables-windows-v${{ steps.version.outputs.version }}
#         path: windows-artifacts/
#         retention-days: 30
#         
#     - name: Cleanup
#       if: always()
#       run: |
#         docker rm windows-build || true
#         
#   build-macos:
#     name: Build macOS Executables
#     runs-on: macos-latest
#     if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
#     
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}
#         
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install -r requirements-build.txt
#         
#     - name: Build macOS executables
#       run: |
#         echo "Building on macOS..."
#         ./build-unix.sh --platform macos
#         
#     - name: Get version
#       id: version
#       run: |
#         VERSION=$(python version_manager.py get)
#         echo "version=$VERSION" >> $GITHUB_OUTPUT
#         echo "Current version: $VERSION"
#         
#     - name: Check build output
#       run: |
#         echo "Checking build output..."
#         if [ -d "build-executables" ]; then
#           echo "Build directory exists:"
#           ls -la build-executables
#         else
#           echo "❌ Build directory not found!"
#           exit 1
#         fi
#         
#     - name: Upload macOS artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: executables-macos-v${{ steps.version.outputs.version }}
#         path: build-executables/
#         retention-days: 30
#         
#   create-release:
#     name: Create Release
#     needs: [build-linux, build-windows, build-macos]
#     runs-on: ubuntu-latest
#     if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
#     
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0
#         
#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: ${{ env.PYTHON_VERSION }}
#         
#     - name: Get version
#       id: version
#       run: |
#         VERSION=$(python version_manager.py get)
#         echo "version=$VERSION" >> $GITHUB_OUTPUT
#         echo "Current version: $VERSION"
#         
#     - name: Download all artifacts
#       uses: actions/download-artifact@v4
#       with:
#         path: artifacts/
#         
#     - name: Create release notes
#       id: release_notes
#       run: |
#         echo "## What's Changed" > release_notes.md
#         echo "" >> release_notes.md
#         echo "### 🚀 New Features" >> release_notes.md
#         echo "- Automated build and release process" >> release_notes.md
#         echo "" >> release_notes.md
#         echo "### 🔧 Technical Details" >> release_notes.md
#         echo "- Built executables for Windows, macOS, and Linux" >> release_notes.md
#         echo "- Version: ${{ steps.version.outputs.version }}" >> release_notes.md
#         echo "" >> release_notes.md
#         echo "### 📦 Downloads" >> release_notes.md
#         echo "Executables are available in the Assets section below." >> release_notes.md
#         echo "" >> release_notes.md
#         echo "### 🔍 Build Details" >> release_notes.md
#         echo "- **Commit**: \`${{ github.sha }}\`" >> release_notes.md
#         echo "- **Branch**: \`${{ github.ref_name }}\`" >> release_notes.md
#         echo "- **Workflow**: \`${{ github.workflow }}\`" >> release_notes.md
#         echo "- **Run ID**: \`${{ github.run_id }}\`" >> release_notes.md
#         
#     - name: Create Release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: v${{ steps.version.outputs.version }}
#         release_name: JiraUtil v${{ steps.version.outputs.version }}
#         body_path: release_notes.md
#         draft: false
#         prerelease: false
#         
#     - name: Upload Windows artifacts to release
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: artifacts/executables-windows-v${{ steps.version.outputs.version }}/build-executables/
#         asset_name: JiraUtil-Windows-v${{ steps.version.outputs.version }}.zip
#         asset_content_type: application/zip
#         
#     - name: Upload macOS artifacts to release
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: artifacts/executables-macos-v${{ steps.version.outputs.version }}/build-executables/
#         asset_name: JiraUtil-macOS-v${{ steps.version.outputs.version }}.zip
#         asset_content_type: application/zip
#         
#     - name: Upload Linux artifacts to release
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: artifacts/executables-linux-v${{ steps.version.outputs.version }}/build-executables/
#         asset_name: JiraUtil-Linux-v${{ steps.version.outputs.version }}.zip
#         asset_content_type: application/zip