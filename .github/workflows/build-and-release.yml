name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-windows:
    name: Build Windows Executables
    runs-on: windows-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Check installed packages
      run: |
        echo "Installed packages:"
        pip list
        echo "Checking for test dependencies..."
        pip show pytest || echo "pytest not installed"
        pip show unittest || echo "unittest not available"
        
    - name: Debug environment
      run: |
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        dir
        
    - name: Run tests separately
      run: |
        echo "Running tests to identify issues..."
        echo "Python path:"
        which python
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Test files available:"
        ls -la tests/
        echo "Checking if pytest is available..."
        if python -m pytest --version 2>/dev/null; then
          echo "Using pytest with verbose output..."
          python -m pytest tests/ -v --tb=short
        else
          echo "Using custom test runner..."
          python tests/run_tests.py
        fi
      
    - name: Check test results
      run: |
        echo "Test step completed (may have failed, but continuing...)"
        echo "Proceeding with build process..."
        
    - name: Build Windows executables
      run: |
        echo "Building on Windows..."
        powershell -ExecutionPolicy Bypass -File build.ps1 -Platform all
        
    - name: Get version from version.json
      id: version
      run: |
        $VERSION = python version_manager.py get
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Check build output
      run: |
        echo "Checking build output..."
        if (Test-Path "build-executables") {
          echo "Build directory exists:"
          dir build-executables
        } else {
          echo "❌ Build directory not found!"
          exit 1
        }
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-windows-v${{ steps.version.outputs.version }}
        path: build-executables/
        retention-days: 30
        
  build-macos:
    name: Build macOS Executables
    runs-on: macos-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Check installed packages
      run: |
        echo "Installed packages:"
        pip list
        echo "Checking for test dependencies..."
        pip show pytest || echo "pytest not installed"
        pip show unittest || echo "unittest not available"
        
    - name: Debug environment
      run: |
        echo "Python version:"
        python --version
        echo "Python path:"
        which python
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Test files:"
        ls -la tests/
        
    - name: Run tests separately
      run: |
        echo "Running tests to identify issues..."
        echo "Python path:"
        which python
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Test files available:"
        ls -la tests/
        echo "Checking if pytest is available..."
        if python -m pytest --version 2>/dev/null; then
          echo "Using pytest with verbose output..."
          python -m pytest tests/ -v --tb=short
        else
          echo "Using custom test runner..."
          python tests/run_tests.py
        fi
      
    - name: Check test results
      run: |
        echo "Test step completed (may have failed, but continuing...)"
        echo "Proceeding with build process..."
        
    - name: Build macOS executables
      run: |
        echo "Building on macOS..."
        chmod +x build-unix.sh
        echo "Running build script with platform: all"
        ./build-unix.sh --platform all
        
    - name: Get version from version.json
      id: version
      run: |
        VERSION=$(python version_manager.py get)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Check build output
      run: |
        echo "Checking build output..."
        if [ -d "build-executables" ]; then
          echo "Build directory exists:"
          ls -la build-executables/
        else
          echo "❌ Build directory not found!"
          exit 1
        fi
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-macos-v${{ steps.version.outputs.version }}
        path: build-executables/
        retention-days: 30
        
  build-linux:
    name: Build Linux Executables
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-build.txt
        
    - name: Check installed packages
      run: |
        echo "Installed packages:"
        pip list
        echo "Checking for test dependencies..."
        pip show pytest || echo "pytest not installed"
        pip show unittest || echo "unittest not available"
        
    - name: Debug environment
      run: |
        echo "Python version:"
        python --version
        echo "Python path:"
        which python
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Test files:"
        ls -la tests/
        
    - name: Run tests separately
      run: |
        echo "Running tests to identify issues..."
        echo "Python path:"
        which python
        echo "Python version:"
        python --version
        echo "Current directory:"
        pwd
        echo "Test files available:"
        ls -la tests/
        echo "Checking if pytest is available..."
        if python -m pytest --version 2>/dev/null; then
          echo "Using pytest with verbose output..."
          python -m pytest tests/ -v --tb=short
        else
          echo "Using custom test runner..."
          python tests/run_tests.py
        fi
      
    - name: Check test results
      run: |
        echo "Test step completed (may have failed, but continuing...)"
        echo "Proceeding with build process..."
        
    - name: Build Linux executables
      run: |
        echo "Building on Linux..."
        chmod +x build-unix.sh
        echo "Running build script with platform: all"
        ./build-unix.sh --platform all
        
    - name: Get version from version.json
      id: version
      run: |
        VERSION=$(python version_manager.py get)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Check build output
      run: |
        echo "Checking build output..."
        if [ -d "build-executables" ]; then
          echo "Build directory exists:"
          ls -la build-executables/
        else
          echo "❌ Build directory not found!"
          exit 1
        fi
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables-linux-v${{ steps.version.outputs.version }}
        path: build-executables/
        retention-days: 30
        
  create-release:
    name: Create Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for release notes
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Get current version
      id: version
      run: |
        VERSION=$(python version_manager.py get)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
        
    - name: Check if tag exists
      id: check-tag
      run: |
        if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.version.outputs.version }} does not exist"
        fi
        
    - name: Generate release notes
      id: release-notes
      if: steps.check-tag.outputs.exists == 'false'
      run: |
        # Get the last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          # No previous tags, get all commits
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" --no-merges)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "# JiraUtil v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## What's New" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Downloads" >> $GITHUB_OUTPUT
          echo "Download the appropriate package for your operating system:" >> $GITHUB_OUTPUT
          echo "- **Windows**: JiraUtil-Windows-v${{ steps.version.outputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "- **macOS**: JiraUtil-macOS-v${{ steps.version.outputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "- **Linux**: JiraUtil-Linux-v${{ steps.version.outputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Installation" >> $GITHUB_OUTPUT
          echo "1. Download the appropriate package for your operating system" >> $GITHUB_OUTPUT
          echo "2. Extract the ZIP file to a folder" >> $GITHUB_OUTPUT
          echo "3. Edit `jira_config.env` with your Jira credentials" >> $GITHUB_OUTPUT
          echo "4. Run the executable or launcher script" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # Get commits since last tag
          COMMITS=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" --no-merges)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "# JiraUtil v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## What's New" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Downloads" >> $GITHUB_OUTPUT
          echo "Download the appropriate package for your operating system:" >> $GITHUB_OUTPUT
          echo "- **Windows**: JiraUtil-Windows-v${{ steps.version.outputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "- **macOS**: JiraUtil-macOS-v${{ steps.version.outputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "- **Linux**: JiraUtil-Linux-v${{ steps.version.outputs.version }}.zip" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Installation" >> $GITHUB_OUTPUT
          echo "1. Download the appropriate package for your operating system" >> $GITHUB_OUTPUT
          echo "2. Extract the ZIP file to a folder" >> $GITHUB_OUTPUT
          echo "3. Edit `jira_config.env` with your Jira credentials" >> $GITHUB_OUTPUT
          echo "4. Run the executable or launcher script" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Full Changelog" >> $GITHUB_OUTPUT
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Git Tag
      if: steps.check-tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "v${{ steps.version.outputs.version }}"
        
    - name: Download all artifacts
      if: steps.check-tag.outputs.exists == 'false'
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: List downloaded artifacts
      if: steps.check-tag.outputs.exists == 'false'
      run: |
        echo "Downloaded artifacts:"
        find ./artifacts -name "*.zip" -type f | sort
        
    - name: Create release
      if: steps.check-tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: JiraUtil v${{ steps.version.outputs.version }}
        body: ${{ steps.release-notes.outputs.notes }}
        files: |
          artifacts/*/JiraUtil-*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Skip release (tag exists)
      if: steps.check-tag.outputs.exists == 'true'
      run: |
        echo "Release v${{ steps.version.outputs.version }} already exists, skipping release creation"